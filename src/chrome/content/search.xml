<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Contacts Sidebar.
   -
   - The Initial Developer of the Original Code is Jeroen Peters.
   - Portions created by the Initial Developer are Copyright (C) 2004
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -  Jeroen Peters <jpeters@coldmail.nl>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings id="SearchBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="searchbar" extends="chrome://global/content/bindings/textbox.xml#textbox">
    <resources>
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>
    </resources>
    
    <content>
      <children/>
<!--      
      <xul:button anonid="quick-search-button" class="quick-search-button" type="menu" chromedir="&locale.dir;">
        <xul:menupopup anonid="quick-search-menupopup"
                   class="quick-search-menupopup"
                   persist="value"
                   onpopupshowing="this.parentNode.parentNode.updatePopup();"
                   popupalign="topleft"
                   popupanchor="bottomleft">
          <xul:menuitem anonid="searchGlobalMenu"
                    class="quick-search-menu"
                    value="global"
                    glodaOnly="true"
                    label="&searchAllMessages.label;"
                    type="radio"
                    oncommand="this.parentNode.parentNode.parentNode.changeMode(this)"/>
          <xul:menuseparator quicksearchOnly="true"
                             glodaOnly="true"/>
        </xul:menupopup>
      </xul:button>
     --> 
      <xul:hbox class="textbox-input-box" flex="1">
        <html:input id="searchInputElem" class="textbox-input" flex="1" anonid="input" allowevents="true"
                    xbl:inherits="onfocus,onblur,value,type,maxlength,disabled,size,readonly,tabindex,accesskey"/>
      </xul:hbox>
      <xul:toolbarbutton id="search-clearbutton" xbl:inherits="" disabled="true" 
                         class="search-clearbutton" onclick="csOnClearSearch(); return false;"/>
    </content>
    
<!--
     <content>
      <xul:button anonid="quick-search-button" class="quick-search-button" type="menu" chromedir="&locale.dir;">
        <xul:menupopup anonid="quick-search-menupopup"
                   class="quick-search-menupopup"
                   persist="value"
                   onpopupshowing="this.parentNode.parentNode.updatePopup();"
                   popupalign="topleft"
                   popupanchor="bottomleft">
          <xul:menuitem anonid="searchGlobalMenu"
                    class="quick-search-menu"
                    value="global"
                    glodaOnly="true"
                    label="&searchAllMessages.label;"
                    type="radio"
                    oncommand="this.parentNode.parentNode.parentNode.changeMode(this)"/>
          <xul:menuseparator quicksearchOnly="true"
                             glodaOnly="true"/>
        </xul:menupopup>
      </xul:button>
      <xul:hbox class="quick-search-textbox textbox-input-box" flex="1">
        <html:input class="textbox-input" flex="1" anonid="input" allowevents="true"
                    xbl:inherits="onfocus,onblur,oninput,value,type,maxlength,disabled,size,readonly,tabindex,accesskey"/>
      </xul:hbox>
      <xul:toolbarbutton anonid="quick-search-clearbutton" xbl:inherits=""
                         disabled="true" class="quick-search-clearbutton"
                         onclick="this.parentNode.value = ''; this.parentNode.doSearch(); this.parentNode.select(); return false;"
                         chromedir="&locale.dir;"/>


    </content>
-->
    <implementation>
      <constructor>
        <![CDATA[
          this.init();
        ]]>
      </constructor>

      <method name="init">
        <body>
          <![CDATA[
            try {
              // initialize the search mode based on the checked menu item
              var menuPopup = document.getElementById('cs-search-menupopup');
              if (menuPopup)
              {
                var selectedMenuItemVal = menuPopup.getAttribute('value');
                if ( selectedMenuItemVal == 4 )
                  selectedMenuItemVal = 0;

                var menuItems = menuPopup.getElementsByAttribute('value', selectedMenuItemVal);
                this.mSearchMode = menuItems[0].getAttribute('value'); // the checked menu item

                // Get all menu items
                menuItems = menuPopup.getElementsByAttribute('value', "*");
                for (var i=0; i<menuItems.length; i++)
                {
                  if (i == this.mSearchMode)
                    // Set checked menu item
                    menuItems[i].setAttribute('checked', "true");
                  else
                    // Uncheck menu item
                    menuItems[i].removeAttribute('checked');
                }

                this.setSearchCriteriaText();
              }
            } catch(e) {
              alert(e.name + ": " + e.message);
            }
          ]]>
        </body>
      </method>

      <property name="showingSearchCriteria" onget="return this.getAttribute('searchCriteria') == 'true';"
                onset="this.setAttribute('searchCriteria', val); return val;"/>

      <property name="clearButtonHidden" onget="return document.getElementById('search-clearbutton').getAttribute('searchCriteria') == 'true';"
                onset="document.getElementById('search-clearbutton').setAttribute('clearButtonHidden', val); return val;"/>

      <field name="mSearchMode">0</field>

      <property name="searchMode" onget="return this.mSearchMode;"
                onset="this.mSearchMode = val; document.getElementById('cs-search-menupopup').setAttribute('value', val);"/>

      <method name="setSearchCriteriaText">
        <body>
          <![CDATA[
            this.showingSearchCriteria = true;
            // extract the label value from the menu item
            var menuItems = document.getElementById('cs-search-menupopup').getElementsByAttribute('value', this.searchMode);
            this.inputField.value = menuItems[0].getAttribute('label');
            this.clearButtonHidden = this.searchMode < 4;
          ]]>
        </body>
      </method>
    </implementation>

    <handlers>
      <handler event="input">
        <![CDATA[
          if (!this.value)
            this.clearButtonHidden = true;
          else
            this.clearButtonHidden = false;
        ]]>
      </handler>

      <handler event="keypress" keycode="vk_up" modifiers="control" phase="capturing">
        <![CDATA[
          var  menuPopup = document.getElementById('cs-search-menupopup');
          var menuPopupValue = menuPopup.getAttribute('value');
          if (menuPopupValue > 0)
          {
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].removeAttribute('checked');
            this.searchMode = --menuPopupValue;
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].setAttribute('checked', 'true');
            menuPopup.setAttribute('value', this.searchMode);
          }
        ]]>
      </handler>

      <handler event="keypress" keycode="vk_down" modifiers="control" phase="capturing">
        <![CDATA[
          var  menuPopup = document.getElementById('cs-search-menupopup');
          var menuPopupValue = menuPopup.getAttribute('value');
          if (menuPopupValue < 4)
          {
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].removeAttribute('checked');
            this.searchMode = ++menuPopupValue;
            menuPopup.getElementsByAttribute('value', this.searchMode)[0].setAttribute('checked', 'true');
            menuPopup.setAttribute('value', this.searchMode);
          }
        ]]>
      </handler>
    </handlers>
  </binding>

  <binding id="searchBarDropMarker">
    <resources>                                                                 
      <stylesheet src="chrome://messenger/skin/searchBox.css"/>                 
    </resources>                                                                
    <content popup="_child">
      <children/>
      <xul:stack flex="1">
        <xul:hbox align="center">
          <xul:image class="search-button-image" xbl:inherits="src"/>
        </xul:hbox>
        <xul:hbox align="center">
          <xul:image class="search-button-dropmarker"/>
        </xul:hbox>
      </xul:stack>
    </content>  
  </binding>

</bindings>
